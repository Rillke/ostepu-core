<?php

include_once dirname(__FILE__) . '/../SID.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-18 at 22:41:41.
 */
class SIDTest extends PHPUnit_Framework_TestCase {

    /**
     * @var SID
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        SID::reset();
        header_remove();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    private static function getHeader(){
        $header = array_merge(
                array(), Request::http_parse_headers_short(php_sapi_name() === 'cli' ? xdebug_get_headers() : headers_list())
        );
        return $header;
    }

    /**
     * @covers SID::storeSid
     */
    public function testStoreSid() {
        $text = ['sid'=>15,'currentBase'=>3];
        SID::restoreSid($text);
        $text2 = SID::storeSid();
        self::assertEquals($text, $text2);
        
    }

    /**
     * @covers SID::restoreSid
     */
    public function testRestoreSid() {
        self::assertEquals(0, SID::getRoot());
        self::assertEquals(0, SID::getSid());
        SID::restoreSid(['sid'=>15,'currentBase'=>3]);
        self::assertEquals(3, SID::getRoot());
        self::assertEquals(15, SID::getSid());
    }

    /**
     * @covers SID::isRoot
     */
    public function testIsRoot() {
        SID::restoreSid(['sid'=>15,'currentBase'=>3]);
        self::assertEquals(false, SID::isRoot());
        SID::restoreSid(['sid'=>3,'currentBase'=>3]);
        self::assertEquals(true, SID::isRoot());
    }

    /**
     * @covers SID::getRoot
     */
    public function testGetRoot() {
        SID::restoreSid(['sid'=>15,'currentBase'=>3]);
        self::assertEquals(3, SID::getRoot());
    }

    /**
     * @covers SID::getNextSid
     */
    public function testGetNextSid() {
        // Remove the following lines when you implement this test.
        $mySID = SID::getNextSid();
        $nextSID = SID::getNextSid();
        self::assertGreaterThan($mySID, $nextSID);
        SID::setSid($nextSID);
        $nextSID2 = SID::getNextSid();
        self::assertEquals($nextSID, $nextSID2);
    }

    /**
     * @covers SID::getSid
     */
    public function testGetSid() {
        // Remove the following lines when you implement this test.
        $header = self::getHeader();
        self::assertFalse(isset($header['Cachesid']));
        self::assertEquals(null, SID::getSid());
        SID::setSid(1);
        self::assertEquals(1, SID::getSid());
        SID::reset();
        self::assertEquals(null, SID::getSid());
    }

    /**
     * @covers SID::setSid
     */
    public function testSetSid() {
        // Remove the following lines when you implement this test.
        self::assertEquals(null, SID::getSid());
        SID::setSid(1);
        self::assertEquals(1, SID::getSid());
    }

    /**
     * @covers SID::unsetSid
     */
    public function testUnsetSid() {
        self::assertEquals(null, SID::getSid());
        SID::setSid(1);
        self::assertEquals(1, SID::getSid());
        SID::unsetSid();        
        self::assertEquals(null, SID::getSid());
    }

    /**
     * @covers SID::reset
     */
    public function testReset() {        
        SID::restoreSid(['sid'=>15,'currentBase'=>3]);
        self::assertEquals(3, SID::getRoot());
        self::assertEquals(15, SID::getSid());
        SID::reset();
        self::assertEquals(0, SID::getRoot());
        self::assertEquals(null, SID::getSid());
    }

}
