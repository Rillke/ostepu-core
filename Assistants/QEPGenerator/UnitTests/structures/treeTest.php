<?php

include_once dirname(__FILE__) . '/../../structures/tree.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-18 at 22:41:56.
 */
class treeTest extends PHPUnit_Framework_TestCase {

    /**
     * @var tree
     */
    protected $tree;
    protected $nodeA;
    protected $nodeB;
    protected $nodeC;
    protected $nodeD;
    protected $nodeE;
    protected $nodeF;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->tree = new tree;
        $this->nodeA = new node();
        $this->nodeA->id=1;
        $this->nodeA->name='A';
        $this->nodeA->URI='http://A';
        $this->nodeA->method='GET';
        $this->nodeA->beginTime=1;
        $this->nodeA->endTime=1;
        
        $this->nodeB = new node();
        $this->nodeB->id=2;
        $this->nodeB->name='B';
        $this->nodeB->URI='http://B';
        $this->nodeB->method='POST';
        $this->nodeB->beginTime=15;
        $this->nodeB->endTime=55;
        
        $this->tree->addNode($this->nodeA);
        $this->tree->addNode($this->nodeB);
        $this->nodeC = new node();
        $this->nodeC->id=3;
        $this->nodeC->name='C';
        $this->nodeC->URI='http://C';
        $this->nodeC->method='PUT';
        $this->nodeC->beginTime=2;
        $this->nodeC->endTime=3;
        
        $this->nodeD = new node();
        $this->nodeD->id=4;
        $this->nodeD->name='D';
        $this->nodeD->URI='http://D';
        $this->nodeD->method='DELETE';
        $this->nodeD->beginTime=155;
        $this->nodeD->endTime=166;
        
        $this->nodeE = new node();
        $this->nodeE->id=5;
        $this->nodeE->name='E';
        $this->nodeE->URI='http://E';
        $this->nodeE->method='GET';
        $this->nodeE->beginTime=2;
        $this->nodeE->endTime=3;
        
        $this->nodeF = new node();
        $this->nodeF->id=6;
        $this->nodeF->name='F';
        $this->nodeF->URI='http://F';
        $this->nodeF->method='GET';
        $this->nodeF->beginTime=99;
        $this->nodeF->endTime=100;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    private function addAllNodes(){
        $this->tree->addNode($this->nodeA);
        $this->tree->addNode($this->nodeB);
        $this->tree->addNode($this->nodeC);
        $this->tree->addNode($this->nodeD);
        $this->tree->addNode($this->nodeE);
        $this->tree->addNode($this->nodeF);
    }

    /**
     * @covers tree::getTreeSize
     */
    public function testGetTreeSize() {
        self::assertEquals(2, $this->tree->getTreeSize());
        $this->tree->removeSubtree($this->nodeA->id);
        self::assertEquals(1, $this->tree->getTreeSize());
    }

    /**
     * @covers tree::getElementsX
     */
    public function testGetElements() {
        $elements = $this->tree->getElements();
        self::assertEquals([1, 2], array_keys($elements));
        
        $this->tree->removeSubtree($this->nodeA->id);
        $elements = $this->tree->getElements();
        self::assertEquals([2], array_keys($elements));
    }

    /**
     * @covers tree::getLeafs
     */
    public function testGetLeafs() {
        $leafs = $this->tree->getLeafs();
        self::assertEquals([1, 2], $leafs);
        
        $this->tree->removeSubtree($this->nodeA->id);
        $leafs = $this->tree->getLeafs();
        self::assertEquals([2], $leafs);
        
        $this->tree->addNode($this->nodeA);
        $this->tree->addEdge(1, 2);
        $leafs = $this->tree->getLeafs();
        self::assertEquals([2], $leafs);
        
    }

    /**
     * @covers tree::getChildsx
     */
    public function testGetChilds() {
        self::assertEquals([], $this->tree->getChilds(1));
        $this->tree->addEdge(1, 2);
        self::assertEquals([2], $this->tree->getChilds(1));
        
        $this->tree->addNode($this->nodeC);
        $this->tree->addEdge(1, 3);
        self::assertEquals([2,3], $this->tree->getChilds(1));
    }

    /**
     * @covers tree::hasChilds
     */
    public function testHasChilds() {
        self::assertFalse($this->tree->hasChilds(1));
        $this->tree->addEdge(1, 2);
        self::assertTrue($this->tree->hasChilds(1));
        $this->tree->removeSubtree(2);
        self::assertFalse($this->tree->hasChilds(1));
    }

    /**
     * @covers tree::setElements
     */
    public function testSetElements() {
        $this->tree->setElements([1=>$this->nodeA]);
        self::assertEquals([1], $this->tree->getIds());
    }

    /**
     * @covers tree::getIds
     */
    public function testGetIds() {
        self::assertEquals([1,2], $this->tree->getIds());
    }

    /**
     * @covers tree::getElementById
     */
    public function testGetElementById() {
        self::assertEquals(1, $this->tree->getElementById(1)->id);
        $this->tree->removeSubtree(1);
        self::assertEquals(null, $this->tree->getElementById(1));
        self::assertEquals(2, $this->tree->getElementById(2)->id);
    }

    /**
     * @covers tree::getPrecedingSibling
     */
    public function testGetPrecedingSibling() {
        $this->addAllNodes();
        self::assertEquals(null, $this->tree->getPrecedingSibling(1));
        $this->tree->addEdge(2, 1);
        self::assertEquals(null, $this->tree->getPrecedingSibling(1));
        $this->tree->addEdge(2, 3);
        self::assertEquals(null, $this->tree->getPrecedingSibling(1));
        self::assertEquals(1, $this->tree->getPrecedingSibling(3));
    }

    /**
     * @covers tree::getFollowingSibling
     */
    public function testGetFollowingSibling() {
        $this->addAllNodes();
        self::assertEquals(null, $this->tree->getFollowingSibling(1));
        $this->tree->addEdge(2, 1);
        self::assertEquals(null, $this->tree->getFollowingSibling(1));
        $this->tree->addEdge(2, 3);
        self::assertEquals(3, $this->tree->getFollowingSibling(1));
        self::assertEquals(null, $this->tree->getFollowingSibling(3));
    }

    /**
     * @covers tree::getDescendant
     */
    public function testGetDescendant() {
        $this->addAllNodes();
        self::assertEquals([], $this->tree->getDescendant(1));
        $this->tree->addEdge(2, 1);
        self::assertEquals([1], $this->tree->getDescendant(2));
        self::assertEquals([], $this->tree->getDescendant(1));
        $this->tree->addEdge(3, 2);
        self::assertEquals([1,2], $this->tree->getDescendant(3));
        self::assertEquals([1], $this->tree->getDescendant(2));
    }

    /**
     * @covers tree::getAncestor
     */
    public function testGetAncestor() {
        $this->addAllNodes();
        self::assertEquals([], $this->tree->getAncestor(2));
        $this->tree->addEdge(1, 2);
        self::assertEquals([1], $this->tree->getAncestor(2));
        self::assertEquals([], $this->tree->getAncestor(1));
        $this->tree->addEdge(3, 1);
        self::assertEquals([1,3], $this->tree->getAncestor(2));
        $this->tree->addEdge(3, 4);
        self::assertEquals([1,3], $this->tree->getAncestor(2));
    }

    /**
     * @covers tree::getFollowingSiblings
     */
    public function testGetFollowingSiblings() {
        $this->addAllNodes();
        self::assertEquals(null, $this->tree->getFollowingSiblings(3));
        $this->tree->addEdge(1, 2);
        self::assertEquals([], $this->tree->getFollowingSiblings(2));
        $this->tree->addEdge(1, 3);
        $this->tree->addEdge(1, 4);
        $this->tree->addEdge(4, 5);
        $this->tree->addEdge(1, 6);
        self::assertEquals([4,6], $this->tree->getFollowingSiblings(3));
    }

    /**
     * @covers tree::getPrecedingSiblings
     */
    public function testGetPrecedingSiblings() {
        $this->addAllNodes();
        self::assertEquals(null, $this->tree->getPrecedingSiblings(3));
        $this->tree->addEdge(1, 2);
        self::assertEquals([], $this->tree->getPrecedingSiblings(2));
        $this->tree->addEdge(1, 6);
        $this->tree->addEdge(1, 3);
        $this->tree->addEdge(1, 4);
        $this->tree->addEdge(2, 5);
        self::assertEquals([2,6], $this->tree->getPrecedingSiblings(3));
    }

    /**
     * @covers tree::removeSubtree
     */
    public function testRemoveSubtree() {
        self::assertEquals([1,2], $this->tree->getIds());
        $this->tree->removeSubtree(2);
        self::assertEquals([1], $this->tree->getIds());
        $this->addAllNodes();
        $this->tree->addEdge(1, 5);
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3);
        $this->tree->addEdge(2, 4);
        $this->tree->addEdge(1, 6);
        $this->tree->removeSubtree(2);
        self::assertEquals([1,5,6], $this->tree->getIds());   
        $this->tree->removeSubtree(5);
        self::assertEquals([1,6], $this->tree->getIds());        
    }

    /**
     * @covers tree::addNode
     */
    public function testAddNode() {
        $this->tree->addNode($this->nodeC);
        self::assertEquals($this->nodeC, $this->tree->getElementById($this->nodeC->id));
        $this->tree->addNode(null);
    }

    /**
     * @covers tree::addEdge
     */
    public function testAddEdge() {
        $this->tree->addEdge(1, 2);
        self::assertEquals(1, $this->tree->getParent(2));
        self::assertEquals(null, $this->tree->getParent(1));
        self::assertEquals([2], $this->tree->getChilds(1));
        self::assertEquals([], $this->tree->getChilds(2));
        
    }

    /**
     * @covers tree::computeExecutionTime
     */
    public function testComputeExecutionTime() {
        $this->tree->computeExecutionTime();
        $elements = $this->tree->getElements();
        $times = array();
        foreach ($elements as $elem) {
            $times[] = $elem->executionTime;
        }
        self::assertEquals([0,40000], $times);
    }

    /**
     * @covers tree::getParent
     */
    public function testGetParent() {
        $this->addAllNodes();
        self::assertEquals(null, $this->tree->getParent(1));
        $this->tree->addEdge(2, 1);
        self::assertEquals(2, $this->tree->getParent(1));
        self::assertEquals(null, $this->tree->getParent(99));
    }

    /**
     * @covers tree::hasParent
     */
    public function testHasParent() {
        self::assertEquals(false, $this->tree->hasParent(1));
        self::assertEquals(null, $this->tree->hasParent(99));
        $this->tree->addEdge(2, 1);
        self::assertEquals(true, $this->tree->hasParent(1));
    }

    /**
     * @covers tree::pathExists
     */
    public function testPathExists() {
        self::assertFalse($this->tree->pathExists(1, 2));
        self::assertTrue($this->tree->pathExists(1, 1));
        $this->tree->addEdge(1, 2);
        self::assertTrue($this->tree->pathExists(1, 2));
        self::assertFalse($this->tree->pathExists(2, 1));
        self::assertFalse($this->tree->pathExists(1, 2, true));
        self::assertTrue($this->tree->pathExists(2, 1, true));
    }

    /**
     * @covers tree::extractSubtree
     */
    public function testExtractSubtree() {
        $mytree = $this->tree->extractSubtree(2);
        self::assertEquals([2], $mytree->getIds());
        
        $this->addAllNodes();
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3); 
        $this->tree->addEdge(3, 4);  
        $this->tree->addEdge(1, 5); 
        $this->tree->addEdge(2, 6);
        $mytree = $this->tree->extractSubtree(2);
        self::assertEquals([2,3,4,6], $mytree->getIds());
        
        $mytree = $this->tree->extractSubtree(6);
        self::assertEquals([6], $mytree->getIds());
    }

    /**
     * @covers tree::getSubtree
     */
    public function testGetSubtree() {
        $this->addAllNodes();
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3); 
        $this->tree->addEdge(3, 4);  
        $this->tree->addEdge(1, 5); 
        $this->tree->addEdge(2, 6);
        self::assertEquals(1, $this->tree->getSubtree('A', 'http://A', 'GET'));
        self::assertEquals(4, $this->tree->getSubtree('D', 'http://D', 'DELETE'));
        self::assertEquals(6, $this->tree->getSubtree('F', 'http://F', 'GET'));
    }

    /**
     * @covers tree::getElementsInSubtree
     */
    public function testGetElementsInSubtree() {
        $this->addAllNodes();
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3); 
        $this->tree->addEdge(3, 4);  
        $this->tree->addEdge(1, 5); 
        $this->tree->addEdge(2, 6);
        self::assertEquals([1,2,3,4,5,6], $this->tree->getElementsInSubtree(1));
        self::assertEquals([6], $this->tree->getElementsInSubtree(6));
        self::assertEquals([3,4], $this->tree->getElementsInSubtree(3));
    }

    /**
     * @covers tree::emptyTree
     */
    public function testEmptyTree() {
        self::assertEquals(false, $this->tree->emptyTree());
        $mytree = new tree();
        self::assertEquals(true, $mytree->emptyTree());
        $mytree->addNode($this->nodeA);
        self::assertEquals(false, $this->tree->emptyTree());        
    }

    /**
     * @covers tree::sortTree
     */
    public function testSortTree() {
        $this->tree->addNode($this->nodeF);
        $this->tree->addNode($this->nodeD);
        $this->tree->addNode($this->nodeA);
        $this->tree->addNode($this->nodeE);
        $this->tree->addNode($this->nodeC);
        $this->tree->addNode($this->nodeB);
        self::assertEquals([1,2,6,4,5,3], $this->tree->getIds());
        
        $this->tree->addEdge(1, 6);
        $this->tree->addEdge(1, 4);
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(1, 3);
        self::assertEquals([6,4,2,3], $this->tree->getChilds(1));
        
        $this->tree->sortTree();
        self::assertEquals([1,2,3,4,5,6], $this->tree->getIds());
        self::assertEquals([2,3,4,6], $this->tree->getChilds(1));
    }

    /**
     * @covers tree::findRoot
     */
    public function testFindRoot() {
        self::assertEquals(1, $this->tree->findRoot()); 
        $this->addAllNodes();
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3); 
        $this->tree->addEdge(3, 4);  
        $this->tree->addEdge(1, 5); 
        $this->tree->addEdge(6, 1);
        self::assertEquals(6, $this->tree->findRoot());
        $this->tree->removeSubtree(1);
        self::assertEquals(6, $this->tree->findRoot());
    }
    
    /**
     * @covers tree::strongConnected
     */
    public function testStrongConnected(){
        self::assertEquals(false, $this->tree->strongConnected());
        
        $this->addAllNodes();
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3); 
        $this->tree->addEdge(3, 4);  
        $this->tree->addEdge(1, 5); 
        self::assertEquals(false, $this->tree->strongConnected()); 
        
        $this->tree->addEdge(6, 1);
        self::assertEquals(true, $this->tree->strongConnected());
    }

    /**
     * @covers tree::resetAllLabel
     */
    public function testResetAllLabel() {
        $this->tree->setLabel(1, 'A');
        $this->tree->setLabel(2, 'B');
        self::assertEquals('A', $this->tree->getLabel(1));
        $this->tree->resetAllLabel();
        self::assertEquals(null, $this->tree->getLabel(1));
        self::assertEquals(null, $this->tree->getLabel(2));
    }
    
     /**
     * @covers tree::setLabel
     */   
    public function testSetLabel() {
        self::assertEquals(null, $this->tree->getLabel(1));
        $this->tree->setLabel(1, 'A');
        self::assertEquals('A', $this->tree->getLabel(1));
        $this->tree->setLabel(1, null);
        self::assertEquals(null, $this->tree->getLabel(1));
    }
    
    /**
     * @covers tree::unsetLabel
     */  
    public function testUnsetLabel() {
        self::assertEquals(null, $this->tree->getLabel(1));
        $this->tree->setLabel(1, 'A');
        self::assertEquals('A', $this->tree->getLabel(1));
        $this->tree->unsetLabel(1);
        self::assertEquals(null, $this->tree->getLabel(1));
    }
    
     /**
     * @covers tree::getLabel
     */   
    public function testGetLabel() {
        self::assertEquals(null, $this->tree->getLabel(1));
        $this->tree->setLabel(1, 'A');
        self::assertEquals('A', $this->tree->getLabel(1));
    }
   
    /**
     * @covers tree::isLabel
     */
    public function testIsLabel() {
        $this->tree->setLabel(1, 'A');
        self::assertEquals(true, $this->tree->isLabel(1, 'A'));
        self::assertEquals(false, $this->tree->isLabel(1, 'a'));
        self::assertEquals(false, $this->tree->isLabel(1, null));
        self::assertEquals(false, $this->tree->isLabel(1, 0));
        self::assertEquals(false, $this->tree->isLabel(1, 1));
        
        $this->tree->setLabel(1, null);
        self::assertEquals(false, $this->tree->isLabel(1, 'A'));
        self::assertEquals(false, $this->tree->isLabel(1, 'a'));
        self::assertEquals(true, $this->tree->isLabel(1, null));
        self::assertEquals(false, $this->tree->isLabel(1, 0));
        self::assertEquals(false, $this->tree->isLabel(1, 1));
        
        $this->tree->setLabel(1, 1);
        self::assertEquals(false, $this->tree->isLabel(1, 'A'));
        self::assertEquals(false, $this->tree->isLabel(1, 'a'));
        self::assertEquals(false, $this->tree->isLabel(1, null));
        self::assertEquals(false, $this->tree->isLabel(1, 0));
        self::assertEquals(true, $this->tree->isLabel(1, 1));
    }

    /**
     * @covers tree::isNotLabel
     */
    public function testIsNotLabel() {
        $this->tree->setLabel(1, 'A');
        self::assertEquals(false, $this->tree->isNotLabel(1, 'A'));
        self::assertEquals(true, $this->tree->isNotLabel(1, 'a'));
        self::assertEquals(true, $this->tree->isNotLabel(1, null));
        self::assertEquals(true, $this->tree->isNotLabel(1, 0));
        self::assertEquals(true, $this->tree->isNotLabel(1, 1));
        
        $this->tree->setLabel(1, null);
        self::assertEquals(true, $this->tree->isNotLabel(1, 'A'));
        self::assertEquals(true, $this->tree->isNotLabel(1, 'a'));
        self::assertEquals(false, $this->tree->isNotLabel(1, null));
        self::assertEquals(true, $this->tree->isNotLabel(1, 0));
        self::assertEquals(true, $this->tree->isNotLabel(1, 1));
        
        $this->tree->setLabel(1, 1);
        self::assertEquals(true, $this->tree->isNotLabel(1, 'A'));
        self::assertEquals(true, $this->tree->isNotLabel(1, 'a'));
        self::assertEquals(true, $this->tree->isNotLabel(1, null));
        self::assertEquals(true, $this->tree->isNotLabel(1, 0));
        self::assertEquals(false, $this->tree->isNotLabel(1, 1));
    }

    /**
     * @covers tree::encodeTree
     */
    public function testEncodeTree() {
        $this->addAllNodes();
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3); 
        $this->tree->addEdge(3, 4);  
        $this->tree->addEdge(1, 5);
        
        $text = $this->tree->encodeTree($this->tree);
        self::assertEquals(true, is_string($text));
        self::assertEquals($this->tree, tree::decodeTree($text));
        
        $text = $this->tree->encodeTree([$this->tree]);
        self::assertEquals(true, is_string($text));
        self::assertEquals([$this->tree], tree::decodeTree($text));
    }

    /**
     * @covers tree::decodeTree
     */
    public function testDecodeTree() {
        $this->addAllNodes();
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3); 
        $this->tree->addEdge(3, 4);  
        $this->tree->addEdge(1, 5);
        $text = $this->tree->encodeTree($this->tree);
        self::assertEquals($this->tree, tree::decodeTree($text));
        $text = $this->tree->encodeTree([$this->tree]);
        self::assertEquals([$this->tree], tree::decodeTree($text));
    }

    /**
     * @covers tree::jsonSerialize
     */
    public function testJsonSerialize() {
        $res = $this->tree->jsonSerialize();
        self::assertArrayHasKey('elements', $res);
    }
    
    /**
     * @covers tree::removeAllEdges
     */
    public function testRemoveAllEdges(){
        $this->addAllNodes();
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3); 
        $this->tree->addEdge(3, 4);  
        $this->tree->addEdge(1, 5); 
        $this->tree->removeAllEdges();
        self::assertEquals(false, $this->nodeA->hasChilds());
        self::assertEquals(false, $this->nodeB->hasChilds());
        self::assertEquals(false, $this->nodeC->hasChilds());
        self::assertEquals(false, $this->nodeD->hasChilds());
        self::assertEquals(false, $this->nodeE->hasChilds());
        self::assertEquals(false, $this->nodeF->hasChilds());
        self::assertEquals(false, $this->nodeA->hasParent());
        self::assertEquals(false, $this->nodeB->hasParent());
        self::assertEquals(false, $this->nodeC->hasParent());
        self::assertEquals(false, $this->nodeD->hasParent());
        self::assertEquals(false, $this->nodeE->hasParent());
        self::assertEquals(false, $this->nodeF->hasParent());
    }

}
