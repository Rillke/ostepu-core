<?php

include_once dirname(__FILE__) . '/../../structures/node.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-18 at 22:41:48.
 */
class nodeTest extends PHPUnit_Framework_TestCase {

    /**
     * @var node
     */
    protected $object;
    private $elem=null;
    private $elem2=null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        $this->elem = new node();
        $this->elem2 = new node();
        
        $this->elem2->id=0;
        $this->elem->id=1;
        $this->elem->URI="http://A";
        $this->elem->method="GET";
        $this->elem2->URI="http://B";
        $this->elem2->method="GET";
        $this->elem->result = "A";
        $this->elem2->result = str_pad("A", 10);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers node::hasChilds
     */
    public function testHasChilds() {
        self::assertFalse($this->elem->hasChilds());
        $this->elem->childs[] = $this->elem2->id;
        self::assertTrue($this->elem->hasChilds());
    }

    /**
     * @covers node::getChilds
     */
    public function testGetChilds() {
        self::assertEquals([], $this->elem->getChilds());
        $this->elem->childs[] = $this->elem2->id;
        self::assertEquals(1, count($this->elem->getChilds()));
        self::assertContains($this->elem2->id, $this->elem->getChilds());
        self::assertTrue(is_array($this->elem->getChilds()));
    }

    /**
     * @covers node::hasParent
     */
    public function testHasParent() {
        self::assertFalse($this->elem->hasParent());
        $this->elem->childs[] = $this->elem2->id;
        self::assertFalse($this->elem->hasParent());
        $this->elem->parent=$this->elem2->id;
        self::assertTrue($this->elem->hasParent());
    }

    /**
     * @covers node::isLeaf
     */
    public function testIsLeaf() {
        self::assertTrue($this->elem->isLeaf());
        $this->elem->parent=$this->elem2->id;
        self::assertTrue($this->elem->isLeaf());
        $this->elem->childs[] = $this->elem2->id;
        self::assertFalse($this->elem->isLeaf());
    }

    /**
     * @covers node::isRoot
     */
    public function testIsRoot() {
        self::assertTrue($this->elem->isRoot());
        $this->elem->childs[] = $this->elem2->id;
        self::assertTrue($this->elem->isRoot());
        $this->elem->parent=$this->elem2->id;
        self::assertFalse($this->elem->isRoot());
    }

    /**
     * @covers node::addEdge
     */
    public function testAddEdge() {
        // Remove the following lines when you implement this test.
        self::assertFalse($this->elem->hasChilds());
        $this->elem->addEdge($this->elem2->id);
        self::assertTrue($this->elem->hasChilds());
        self::assertContains($this->elem2->id, $this->elem->childs);
    }

    /**
     * @covers node::generateUTag
     */
    public function testGenerateUTag() {
        $tag = $this->elem->generateUTag();
        $tag2 = $this->elem2->generateUTag();
        self::assertTrue($tag !== $tag2);
        self::assertTrue($tag !== '');
        self::assertTrue($tag !== null);
        self::assertTrue($tag2 !== '');
        self::assertTrue($tag2 !== null);
        
        
        $this->elem2->URI="B";
        $this->elem2->method="GET";
        $tag = $this->elem->generateUTag();
        $tag2 = $this->elem2->generateUTag();
        self::assertTrue($tag !== $tag2);
        self::assertTrue($tag !== '');
        self::assertTrue($tag !== null);
        self::assertTrue($tag2 !== '');
        self::assertTrue($tag2 !== null);
    }

    /**
     * @covers node::generateETag
     */
    public function testGenerateETag() {
        $tag = $this->elem->generateETag();
        $tag2 = $this->elem2->generateETag();
        self::assertTrue($tag !== $tag2);
        self::assertTrue($tag !== '');
        self::assertTrue($tag !== null);
        self::assertTrue($tag2 !== '');
        self::assertTrue($tag2 !== null);
    }

    /**
     * @covers node::encodeNode
     */
    public function testEncodeNode() {
        // ein einzelnes Objekt
        $text = node::encodeNode($this->elem);
        self::assertTrue($text !== '');
        self::assertTrue($text !== null);
        self::assertTrue(is_string($text));
        $object = json_decode($text);
        self::assertTrue($object !== null);
        
        // eine Menge von Objekten
        $text = node::encodeNode([$this->elem, $this->elem2]);
        self::assertTrue($text !== '');
        self::assertTrue($text !== null);
        self::assertTrue(is_string($text));  
        $object = json_decode($text);
        self::assertTrue($object !== null);  
    }

    /**
     * @covers node::decodeNode
     */
    public function testDecodeNode() {
        $text = node::encodeNode($this->elem);
        self::assertEquals($this->elem, node::decodeNode($text));
        self::assertEquals(null, node::decodeNode('{}')->id);
        self::assertEquals(1, node::decodeNode('{"id":1}')->id);
        self::assertEquals(null, node::decodeNode('{"id":null}')->id);
    }

    /**
     * @covers node::jsonSerialize
     */
    public function testJsonSerialize() {
        $res = $this->elem->jsonSerialize();
        self::assertEquals(true, is_array($res));
    }

}
