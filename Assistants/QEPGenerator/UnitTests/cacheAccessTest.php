<?php

include_once dirname(__FILE__) . '/../cacheAccess.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-18 at 22:41:43.
 */
class cacheAccessTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        cacheAccess::removeData('A');
        cacheAccess::removeData('B');
        cacheAccess::removeData('C');
        cacheAccess::removeData('D');
        cacheAccess::removeData('E');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        cacheAccess::removeData('A');
        cacheAccess::removeData('B');
        cacheAccess::removeData('C');
        cacheAccess::removeData('D');
        cacheAccess::removeData('E');
    }

    /**
     * @covers cacheAccess::storeData
     */
    public function testStoreData() {
        self::assertEquals(null, cacheAccess::loadData('A'));
        cacheAccess::storeData('A', 'AA');
        self::assertEquals('AA', cacheAccess::loadData('A'));
        cacheAccess::storeData('B', 'BB');
        self::assertEquals('AA', cacheAccess::loadData('A'));
        self::assertEquals('BB', cacheAccess::loadData('B'));
    }

    /**
     * @covers cacheAccess::removeData
     */
    public function testRemoveData() {
        self::assertEquals(null, cacheAccess::loadData('A'));
        cacheAccess::storeData('A', 'AA');
        self::assertEquals('AA', cacheAccess::loadData('A'));
        cacheAccess::removeData('A');
        self::assertEquals(null, cacheAccess::loadData('A'));
        cacheAccess::removeData('A');
        self::assertEquals(null, cacheAccess::loadData('A'));
        cacheAccess::storeData('A', 'AA');
        self::assertEquals('AA', cacheAccess::loadData('A'));
    }

    /**
     * @covers cacheAccess::loadData
     */
    public function testLoadData() {
        cacheAccess::storeData('A', 'AA');
        cacheAccess::storeData('B', 'BB');
        self::assertEquals('AA', cacheAccess::loadData('A'));
        self::assertEquals('BB', cacheAccess::loadData('B'));
        self::assertEquals(null, cacheAccess::loadData('C'));
    }

    /**
     * @covers cacheAccess::loadDataArray
     */
    public function testLoadDataArray() {
        cacheAccess::storeData('A', 'AA');
        cacheAccess::storeData('B', 'BB');
        self::assertEquals(['A'=>'AA','B'=>'BB','C'=>null], cacheAccess::loadDataArray(['A','B','C']));
        self::assertEquals(['C'=>null,'B'=>'BB','A'=>'AA'], cacheAccess::loadDataArray(['C','B','A']));
        self::assertEquals(['C'=>null,'A'=>'AA','A'=>'AA'], cacheAccess::loadDataArray(['C','A','A']));
        self::assertEquals(['C'=>null,'C'=>null,'C'=>null], cacheAccess::loadDataArray(['C','C','C']));
        self::assertEquals([], cacheAccess::loadDataArray([]));
    }

    /**
     * @covers cacheAccess::touch
     */
    public function testTouch() {
        self::assertEquals(false, cacheAccess::touch('A'));
        cacheAccess::storeData('A', 'AA');
        self::assertEquals(true, cacheAccess::touch('A'));
        self::assertEquals(false, cacheAccess::touch('B'));
    }

}
