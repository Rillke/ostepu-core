<?php

include_once dirname(__FILE__) . '/../../QEPGenerator.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-28 at 11:01:41.
 */
class QEPGeneratorTest extends PHPUnit_Framework_TestCase {

    /**
     * @var QEPGenerator
     */
    protected $tree;
    protected $nodeA;
    protected $nodeB;
    protected $nodeC;
    protected $nodeD;
    protected $nodeE;
    protected $nodeF;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->tree = new cacheTree();
        $this->nodeA = new node();
        $this->nodeA->id = 1;
        $this->nodeA->name = 'A';
        $this->nodeA->URI = 'http://A';
        $this->nodeA->method = 'GET';
        $this->nodeA->beginTime = 1;
        $this->nodeA->endTime = 1;

        $this->nodeB = new node();
        $this->nodeB->id = 2;
        $this->nodeB->name = 'B';
        $this->nodeB->URI = 'http://B';
        $this->nodeB->method = 'GET';
        $this->nodeB->beginTime = 15;
        $this->nodeB->endTime = 55;

        $this->tree->addNode($this->nodeA);
        $this->tree->addNode($this->nodeB);
        $this->nodeC = new node();
        $this->nodeC->id = 3;
        $this->nodeC->name = 'C';
        $this->nodeC->URI = 'http://C';
        $this->nodeC->method = 'GET';
        $this->nodeC->beginTime = 2;
        $this->nodeC->endTime = 3;

        $this->nodeD = new node();
        $this->nodeD->id = 4;
        $this->nodeD->name = 'D';
        $this->nodeD->URI = 'http://D';
        $this->nodeD->method = 'GET';
        $this->nodeD->beginTime = 155;
        $this->nodeD->endTime = 166;

        $this->nodeE = new node();
        $this->nodeE->id = 5;
        $this->nodeE->name = 'E';
        $this->nodeE->URI = 'http://E';
        $this->nodeE->method = 'GET';
        $this->nodeE->beginTime = 2;
        $this->nodeE->endTime = 3;

        $this->nodeF = new node();
        $this->nodeF->id = 6;
        $this->nodeF->name = 'F';
        $this->nodeF->URI = 'http://F';
        $this->nodeF->method = 'GET';
        $this->nodeF->beginTime = 99;
        $this->nodeF->endTime = 100;
        
        QEPGenerator::disable();
        header_remove();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    private function addAllNodes() {
        $this->tree->addNode($this->nodeA);
        $this->tree->addNode($this->nodeB);
        $this->tree->addNode($this->nodeC);
        $this->tree->addNode($this->nodeD);
        $this->tree->addNode($this->nodeE);
        $this->tree->addNode($this->nodeF);
    }

    private function simpleTree(){
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3);
        $this->tree->addEdge(3, 4);
        $this->tree->addEdge(1, 5);
        $this->tree->addEdge(2, 6);
    }

    /**
     * @covers QEPGenerator::getDefaultConf
     */
    public function testGetDefaultConf() {
        $conf = QEPGenerator::getDefaultConf();
        self::assertArrayHasKey('enabled', $conf);
        self::assertArrayHasKey('makeTree', $conf);
        self::assertArrayHasKey('treePath', $conf);
    }

    /**
     * @covers QEPGenerator::getConf
     */
    public function testGetConf() {
        $old = QEPGenerator::getConf('enabled');
        
        QEPGenerator::disable();
        self::assertEquals(false, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::enable();
        self::assertEquals(true, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::setConf('enabled', $old);
    }

    /**
     * @covers QEPGenerator::setConf
     */
    public function testSetConf() {
        $old = QEPGenerator::getConf('enabled');
        QEPGenerator::setConf('enabled', true);
        self::assertEquals(true, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::setConf('enabled', false);
        self::assertEquals(false, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::setConf('enabled', true);
        self::assertEquals(true, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::setConf('enabled', $old);
    }

    /**
     * @covers QEPGenerator::getFirstIndex
     */
    public function testGetFirstIndex() {
        self::assertEquals(null, QEPGenerator::getFirstIndex([]));
        self::assertEquals(0, QEPGenerator::getFirstIndex([0,1,2]));
        self::assertEquals(0, QEPGenerator::getFirstIndex([1,2,3]));
        self::assertEquals(6, QEPGenerator::getFirstIndex([6=>1,2,3]));
        self::assertEquals('6', QEPGenerator::getFirstIndex(['6'=>1,2,3]));
    }

    /**
     * @covers QEPGenerator::getFirstElement
     */
    public function testGetFirstElement() {
        self::assertEquals(null, QEPGenerator::getFirstElement([]));
        self::assertEquals(0, QEPGenerator::getFirstElement([0,1,2]));
        self::assertEquals(1, QEPGenerator::getFirstElement([1,2,3]));
        self::assertEquals(5, QEPGenerator::getFirstElement([6=>5,2,3]));
        self::assertEquals(4, QEPGenerator::getFirstElement(['6'=>4,2,3]));
    }

    /**
     * @covers QEPGenerator::enableMakeTree
     */
    public function testEnableMakeTree() {
        $old = QEPGenerator::getConf('makeTree');
        
        QEPGenerator::enableMakeTree();
        self::assertEquals(true, QEPGenerator::getConf('makeTree'));
        
        QEPGenerator::disableMakeTree();
        self::assertEquals(false, QEPGenerator::getConf('makeTree'));
        
        QEPGenerator::enableMakeTree();
        self::assertEquals(true, QEPGenerator::getConf('makeTree'));
        
        QEPGenerator::setConf('makeTree', $old);
    }

    /**
     * @covers QEPGenerator::disableMakeTree
     * @todo   Implement testDisableMakeTree().
     */
    public function testDisableMakeTree() {
        $old = QEPGenerator::getConf('makeTree');
        
        QEPGenerator::disableMakeTree();
        self::assertEquals(false, QEPGenerator::getConf('makeTree'));
        
        QEPGenerator::enableMakeTree();
        self::assertEquals(true, QEPGenerator::getConf('makeTree'));
        
        QEPGenerator::disableMakeTree();
        self::assertEquals(false, QEPGenerator::getConf('makeTree'));
        
        QEPGenerator::setConf('makeTree', $old);
    }

    /**
     * @covers QEPGenerator::getNextSid
     */
    public function testGetNextSid() {
        $sid = QEPGenerator::getNextSid();
        self::assertEquals($sid+1, QEPGenerator::getNextSid());
        self::assertEquals($sid+2, QEPGenerator::getNextSid());
    }

    /**
     * @covers QEPGenerator::enable
     */
    public function testEnable() {
        $old = QEPGenerator::getConf('enabled');
        QEPGenerator::enable();
        self::assertEquals(true, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::disable();
        self::assertEquals(false, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::enable();
        self::assertEquals(true, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::setConf('enabled', $old);
    }

    /**
     * @covers QEPGenerator::disable
     */
    public function testDisable() {
        $old = QEPGenerator::getConf('enabled');
        QEPGenerator::disable();
        self::assertEquals(false, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::enable();
        self::assertEquals(true, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::disable();
        self::assertEquals(false, QEPGenerator::getConf('enabled'));
        
        QEPGenerator::setConf('enabled', $old);
    }

    /**
     * @covers QEPGenerator::reset
     */
    public function testReset() {
        $old = SID::getNextSid();
        SID::setSid($old);
        self::assertEquals(true, $old !== null);
        
        QEPGenerator::reset();
        
        self::assertEquals(null, QEPGenerator::$tree);
        self::assertEquals($old, SID::getSid());
    }

    /**
     * @covers QEPGenerator::generateURL
     */
    public function testGenerateURL() {
        self::assertEquals('unknown://unknown/unknown', QEPGenerator::generateURL());
        
        $_SERVER['REQUEST_SCHEME'] = "http";
        $_SERVER['SERVER_NAME'] = "AA";
        $_SERVER['REQUEST_URI'] = "/BB";
        self::assertEquals('http://AA/BB', QEPGenerator::generateURL()); 
        
        unset($_SERVER['REQUEST_SCHEME']);
        unset($_SERVER['SERVER_NAME']);
        unset($_SERVER['REQUEST_URI']);
    }

    /**
     * @covers QEPGenerator::getCachedDataByURL
     */
    public function testGetCachedDataByURL() {
        $data = QEPGenerator::getCachedDataByURL("http://A", "GET");
        self::assertEquals(null, $data);
        
        QEPGenerator::enable();
        $this->addAllNodes();
        $this->simpleTree();
        QEPGenerator::$tree = $this->tree;
        QEPGenerator::cacheData(1, 'ABC', 200);
        $data2 = QEPGenerator::getCachedDataByURL("http://A", "GET");
        self::assertEquals('ABC', $data2->content);
        
        $data3 = QEPGenerator::getCachedDataByURL("http://ABC", "GET");
        self::assertEquals(null, $data3);
    }

    /**
     * @covers QEPGenerator::createNode
     * @todo   Implement testCreateNode().
     */
    public function testCreateNode() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers QEPGenerator::releaseNode
     * @todo   Implement testReleaseNode().
     */
    public function testReleaseNode() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers QEPGenerator::saveTree
     * @todo   Implement testSaveTree().
     */
    public function testSaveTree() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers QEPGenerator::saveNode
     * @todo   Implement testSaveNode().
     */
    public function testSaveNode() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers QEPGenerator::cacheData
     */
    public function testCacheData() {
        $data = QEPGenerator::getCachedDataByURL("http://A", "GET");
        self::assertEquals(null, $data);
        
        QEPGenerator::enable();
        $this->addAllNodes();
        $this->simpleTree();
        QEPGenerator::$tree = $this->tree;

        self::assertEquals(true, QEPGenerator::cacheData(1, 'ABC', 200));
        $data2 = QEPGenerator::getCachedDataByURL("http://A", "GET");
        self::assertEquals('ABC', $data2->content);

        self::assertEquals(true, QEPGenerator::cacheData(1, 'ABC2', 200));
        $data2 = QEPGenerator::getCachedDataByURL("http://A", "GET");
        self::assertEquals('ABC2', $data2->content);

        self::assertEquals(true, QEPGenerator::cacheData(1, json_encode(122), 200));
        $data2 = QEPGenerator::getCachedDataByURL("http://A", "GET");
        self::assertEquals(122, $data2->content);

        self::assertEquals(true, QEPGenerator::cacheData(1, json_encode([1,'A'=>2,3,4]), 200));
        $data2 = QEPGenerator::getCachedDataByURL("http://A", "GET");
        self::assertEquals(json_encode([1,'A'=>2,3,4]), $data2->content);
    }

    /**
     * @covers QEPGenerator::generateETag
     */
    public function testGenerateETag() {
        $in = 'abc';
        $res = QEPGenerator::generateETag($in);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res));
        
        $in2 = 'abc';
        $res2 = QEPGenerator::generateETag($in2);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res2));
        self::assertEquals($res, $res2);
        
        $in3 = 'qq';
        $res3 = QEPGenerator::generateETag($in3);
        self::assertEquals(true, $res2 !== $res3);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res3));
        
        $in4 = '';
        $res4 = QEPGenerator::generateETag($in4);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res4));
        
        $in5 = null;
        $res5 = QEPGenerator::generateETag($in5);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res5));
        
        $in6 = 2;
        $res6 = QEPGenerator::generateETag($in6);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res6));
        
        $in7 = '$data';
        $res7 = QEPGenerator::generateETag($in7);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res7));
        
        $in8 = new node();
        $res8 = QEPGenerator::generateETag($in8);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res8));
        
        $in9 = [1,2,5=>3,4,5];
        $res9 = QEPGenerator::generateETag($in9);
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res9));
        
    }

    /**
     * @covers QEPGenerator::generateUTag
     */
    public function testGenerateUTag() {
        $res = QEPGenerator::generateUTag('http://A', 'GET');
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res));
        
        $res2 = QEPGenerator::generateUTag('http://A', 'GET');
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res2));
        self::assertEquals($res, $res2);
        
        $res3 = QEPGenerator::generateUTag('http://B', 'GET');
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res3));        
        self::assertEquals(true, $res2 !== $res3);
        
        $res4 = QEPGenerator::generateUTag('http://A', 'PUT');
        self::assertEquals(1, preg_match('%^[0-9A-Fa-f]{32}$%', $res4));        
        self::assertEquals(true, $res2 !== $res4);
    }

    /**
     * @covers QEPGenerator::setETag
     * @todo   Implement testSetETag().
     */
    public function testSetETag() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers QEPGenerator::setCacheSid
     * @runInSeparateProcess
     */
    public function testSetCacheSid() {
        QEPGenerator::setCacheSid(1);
        self::assertEquals(1,SID::getSid());
        QEPGenerator::setCacheSid(2);
        self::assertEquals(2,SID::getSid());
    }

    /**
     * @covers QEPGenerator::unsetCacheSid
     * @runInSeparateProcess
     */
    public function testUnsetCacheSid() {
        QEPGenerator::setCacheSid(1);
        self::assertEquals(1,SID::getSid());
        QEPGenerator::unsetCacheSid();
        self::assertEquals(null,SID::getSid());
    }

    /**
     * @covers QEPGenerator::computeProgress
     */
    public function testComputeProgress() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers QEPGenerator::getTree
     */
    public function testGetTree() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
