<?php

include_once dirname(__FILE__) . '/../cacheTree.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-18 at 22:41:46.
 */
class cacheTreeTest extends PHPUnit_Framework_TestCase {

    /**
     * @var cacheTree
     */
    protected $tree;
    protected $nodeA;
    protected $nodeB;
    protected $nodeC;
    protected $nodeD;
    protected $nodeE;
    protected $nodeF;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->tree = new cacheTree();
        $this->nodeA = new node();
        $this->nodeA->id = 1;
        $this->nodeA->name = 'A';
        $this->nodeA->URI = 'http://A';
        $this->nodeA->method = 'GET';
        $this->nodeA->beginTime = 1;
        $this->nodeA->endTime = 1;

        $this->nodeB = new node();
        $this->nodeB->id = 2;
        $this->nodeB->name = 'B';
        $this->nodeB->URI = 'http://B';
        $this->nodeB->method = 'GET';
        $this->nodeB->beginTime = 15;
        $this->nodeB->endTime = 55;

        $this->tree->addNode($this->nodeA);
        $this->tree->addNode($this->nodeB);
        $this->nodeC = new node();
        $this->nodeC->id = 3;
        $this->nodeC->name = 'C';
        $this->nodeC->URI = 'http://C';
        $this->nodeC->method = 'GET';
        $this->nodeC->beginTime = 2;
        $this->nodeC->endTime = 3;

        $this->nodeD = new node();
        $this->nodeD->id = 4;
        $this->nodeD->name = 'D';
        $this->nodeD->URI = 'http://D';
        $this->nodeD->method = 'GET';
        $this->nodeD->beginTime = 155;
        $this->nodeD->endTime = 166;

        $this->nodeE = new node();
        $this->nodeE->id = 5;
        $this->nodeE->name = 'E';
        $this->nodeE->URI = 'http://E';
        $this->nodeE->method = 'GET';
        $this->nodeE->beginTime = 2;
        $this->nodeE->endTime = 3;

        $this->nodeF = new node();
        $this->nodeF->id = 6;
        $this->nodeF->name = 'F';
        $this->nodeF->URI = 'http://F';
        $this->nodeF->method = 'GET';
        $this->nodeF->beginTime = 99;
        $this->nodeF->endTime = 100;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    private function addAllNodes() {
        $this->tree->addNode($this->nodeA);
        $this->tree->addNode($this->nodeB);
        $this->tree->addNode($this->nodeC);
        $this->tree->addNode($this->nodeD);
        $this->tree->addNode($this->nodeE);
        $this->tree->addNode($this->nodeF);
    }
    
    private function simpleTree(){
        $this->tree->addEdge(1, 2);
        $this->tree->addEdge(2, 3);
        $this->tree->addEdge(3, 4);
        $this->tree->addEdge(1, 5);
        $this->tree->addEdge(2, 6);
    }

    /**
     * @covers cacheTree::allLeafsComputedAndUnchanged
     */
    public function testAllLeafsComputedAndUnchanged() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        self::assertEquals(true, $this->tree->allLeafsComputedAndUnchanged(4));
        self::assertEquals(false, $this->tree->allLeafsComputedAndUnchanged(1));
        $this->tree->setChanged(4, 0);
        self::assertEquals(true, $this->tree->allLeafsComputedAndUnchanged(4));
        self::assertEquals(false, $this->tree->allLeafsComputedAndUnchanged(1));
        $this->tree->setChanged(3, 0);
        $this->tree->setChanged(2, 0);
        self::assertEquals(false, $this->tree->allLeafsComputedAndUnchanged(2));
        $this->tree->setChanged(6, 0);
        self::assertEquals(true, $this->tree->allLeafsComputedAndUnchanged(2));
        self::assertEquals(false, $this->tree->allLeafsComputedAndUnchanged(1));
        $this->tree->setChanged(5, 0);
        self::assertEquals(true, $this->tree->allLeafsComputedAndUnchanged(1));
        $this->tree->setChanged(1, 0);
        self::assertEquals(true, $this->tree->allLeafsComputedAndUnchanged(1));
    }

    /**
     * @covers cacheTree::getMethodState
     */
    public function testGetMethodState() {
        self::assertEquals(0, $this->tree->getMethodState('get'));
        self::assertEquals(0, $this->tree->getMethodState('GET'));
        self::assertEquals(1, $this->tree->getMethodState('put'));
        self::assertEquals(1, $this->tree->getMethodState('PUT'));
        self::assertEquals(1, $this->tree->getMethodState('delete'));
        self::assertEquals(1, $this->tree->getMethodState('DELETE'));
        self::assertEquals(1, $this->tree->getMethodState('post'));
        self::assertEquals(1, $this->tree->getMethodState('POST'));
        self::assertEquals(0, $this->tree->getMethodState('head'));
        self::assertEquals(0, $this->tree->getMethodState('HEAD'));
        self::assertEquals(0, $this->tree->getMethodState('options'));
        self::assertEquals(0, $this->tree->getMethodState('OPTIONS'));
        self::assertEquals(1, $this->tree->getMethodState('AAA'));
    }

    /**
     * @covers cacheTree::getChangedState
     */
    public function testGetChangedState() {
        self::assertEquals(null, $this->tree->getChangedState(1));
        $this->tree->setChanged(1, 0);
        self::assertEquals(0, $this->tree->getChangedState(1));
        $this->tree->setChanged(1, 1);
        self::assertEquals(1, $this->tree->getChangedState(1));
    }

    /**
     * @covers cacheTree::setChanged
     */
    public function testSetChanged() {
        $this->tree->setChanged(1, 0);
        self::assertEquals(0, $this->tree->getChangedState(1));
        $this->tree->setChanged(1, 1);
        self::assertEquals(1, $this->tree->getChangedState(1));
    }

    /**
     * @covers cacheTree::resetChangedStates
     */
    public function testResetChangedStates() {
        self::assertEquals(null, $this->tree->getChangedState(1));
        $this->tree->setChanged(1, 0);
        self::assertEquals(0, $this->tree->getChangedState(1));
        $this->tree->resetChangedStates();
        self::assertEquals(null, $this->tree->getChangedState(1));
    }

    /**
     * @covers cacheTree::getElementState
     */
    public function testGetElementState() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        self::assertEquals(0, $this->tree->getElementState(1));
        self::assertEquals(0, $this->tree->getElementState(null));
        self::assertEquals(0, $this->tree->getElementState(99));
        self::assertEquals(1, $this->tree->getElementState(5));
    }

    /**
     * @covers cacheTree::getChildsState.
     */
    public function testGetChildsState() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        
        self::assertEquals(0, $this->tree->getChildsState(99));
        self::assertEquals(0, $this->tree->getChildsState(null));
        self::assertEquals(1, $this->tree->getChildsState(2));
        self::assertEquals(0, $this->tree->getChildsState(3));
        self::assertEquals(0, $this->tree->getChildsState(4));
        self::assertEquals(0, $this->tree->getChildsState(6));
        self::assertEquals(1, $this->tree->getChildsState(1));
    }

    /**
     * @covers cacheTree::hasComputableChild
     */
    public function testHasComputableChild() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        
        self::assertEquals(false, $this->tree->hasComputableChild(99));
        self::assertEquals(false, $this->tree->hasComputableChild(null));
        self::assertEquals(false, $this->tree->hasComputableChild(4));
        self::assertEquals(true, $this->tree->hasComputableChild(1));
        self::assertEquals(true, $this->tree->hasComputableChild(3));
        self::assertEquals(true, $this->tree->hasComputableChild(2));
    }

    /**
     * @covers cacheTree::getGroupSize
     */
    public function testGetGroupSize() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        self::assertEquals(0, $this->tree->getGroupSize(1));
        
        $this->nodeC->parallelGroup=3;
        $this->nodeF->parallelGroup=3;
        $this->tree->computeDependencies();
        self::assertEquals(2, $this->tree->getGroupSize(3));
        self::assertEquals(0, $this->tree->getGroupSize(6));
        self::assertEquals(0, $this->tree->getGroupSize(1));
    }

    /**
     * @covers cacheTree::computeDependencies
     */
    public function testComputeDependencies() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        self::assertEquals(['1' => 0, '2' => 0, '3' => 0, '4' => 0, '5' => 1, '6' => 1], $this->tree->getDependencies());
    
        $this->nodeA->method='POST';
        $this->tree->computeDependencies();
        self::assertEquals(['1' => 0, '2' => 1, '3' => 1, '4' => 1, '5' => 1, '6' => 1], $this->tree->getDependencies());
        $this->nodeA->method='GET';
        
        $this->nodeC->method='DElETE';
        $this->tree->computeDependencies();
        self::assertEquals(['1' => 0, '2' => 0, '3' => 0, '4' => 1, '5' => 1, '6' => 1], $this->tree->getDependencies());
        $this->nodeC->method='GET';
    }

    /**
     * @covers cacheTree::extractMinComputable
     */
    public function testExtractMinComputable() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        self::assertEquals([4], $this->tree->extractMinComputable());    
        
        $this->nodeA->method='POST';
        $this->tree->computeDependencies();
        self::assertEquals([1], $this->tree->extractMinComputable());
        $this->nodeA->method='GET';
        
        $this->nodeC->method='DElETE';
        $this->tree->computeDependencies();
        self::assertEquals([3], $this->tree->extractMinComputable());
        $this->nodeC->method='GET';
        
        $this->nodeD->method='PUT';
        $this->tree->computeDependencies();
        self::assertEquals([4], $this->tree->extractMinComputable());
        $this->nodeD->method='GET';
    }

    /**
     * @covers cacheTree::extractComputable
     */
    public function testExtractComputable() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        self::assertEquals([1,2,3,4], $this->tree->extractComputable());
        
        $this->nodeA->method='POST';
        $this->tree->computeDependencies();
        self::assertEquals([1], $this->tree->extractComputable());
        $this->nodeA->method='GET';
        
        $this->nodeC->method='DElETE';
        $this->tree->computeDependencies();
        self::assertEquals([1,2,3], $this->tree->extractComputable());
        $this->nodeC->method='GET';
        
        $this->nodeD->method='PUT';
        $this->tree->computeDependencies();
        self::assertEquals([1,2,3,4], $this->tree->extractComputable());
        $this->nodeD->method='GET';
    }

    /**
     * @covers cacheTree::cleanTree
     */
    public function testCleanTree() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->nodeA->result='A';
        $this->nodeA->input='A';
        $this->nodeA->label='A';
        $this->tree->cleanTree();
        self::assertEquals(true, $this->nodeA->result===null);
        self::assertEquals(true, $this->nodeA->input===null);
        self::assertEquals(true, $this->nodeA->label===null);
    }

    /**
     * @covers cacheTree::jsonSerialize
     */
    public function testJsonSerialize() {
        $this->addAllNodes();
        $this->simpleTree();
        $res = $this->tree->jsonSerialize();
        self::assertEquals(true, is_array($res));
    }

    /**
     * @covers cacheTree::encodeCacheTree
     */
    public function testEncodeCacheTree() {
        $this->addAllNodes();
        $this->simpleTree();
        $text = cacheTree::encodeCacheTree($this->tree);
        self::assertEquals(true, is_string($text));
        $elem = cacheTree::decodeCacheTree($text);
        self::assertEquals($this->tree, $elem);
    }

    /**
     * @covers cacheTree::decodeCacheTree
     */
    public function testDecodeCacheTree() {
        $this->addAllNodes();
        $this->simpleTree();
        $text = cacheTree::encodeCacheTree($this->tree);
        $elem = cacheTree::decodeCacheTree($text);
        self::assertEquals($this->tree, $elem);
        
        $text = cacheTree::encodeCacheTree([$this->tree]);
        $elem = cacheTree::decodeCacheTree($text);
        self::assertEquals([$this->tree], $elem);
    }

    /**
     * @covers cacheTree::getDependencies
     */
    public function testGetDependencies() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        self::assertEquals(['1' => 0, '2' => 0, '3' => 0, '4' => 0, '5' => 1, '6' => 1], $this->tree->getDependencies());
    }

    /**
     * @covers cacheTree::getGroups
     * @todo es muss noch mehr getestet werden
     */
    public function testGetGroups() {
        $this->addAllNodes();
        $this->simpleTree();
        $this->tree->computeDependencies();
        self::assertEquals([], $this->tree->getGroups());
    }

}
